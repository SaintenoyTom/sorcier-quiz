# Workflow CI/CD complet pour React Native + Docker + Sonar + Detox
# Exécuté sur pull_request et push vers main/tag
# Utilise Node LTS, cache npm/yarn/gradle, artefacts, Quality Gate, déploiement conditionnel
# Secrets attendus :
# - SONAR_TOKEN, SONAR_HOST_URL (ou SonarCloud: SONAR_TOKEN, SONAR_ORGANIZATION, SONAR_PROJECT_KEY)
# - REGISTRY_URL, REGISTRY_USERNAME, REGISTRY_PASSWORD (push image)
# - KUBE_CONFIG, SSH_PRIVATE_KEY, FIREBASE_TOKEN (déploiement, exemples)

name: CI/CD
on:
  push:
    branches: [main]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Lint (Airbnb)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci --no-audit --prefer-offline --progress=false --legacy-peer-deps
      - name: Run ESLint (Airbnb)
        run: npm run lint
      - name: Générer rapport ESLint
        run: npx eslint . --max-warnings=0 -f json -o eslint-report.json
      - name: Upload rapport ESLint
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: eslint-report.json
      - name: Résumé Lint
        run: echo "## Résultat Lint" >> $GITHUB_STEP_SUMMARY

  unit_tests:
    name: Tests unitaires (Jest)
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci --no-audit --prefer-offline --progress=false --legacy-peer-deps
      - name: Run unit tests
        run: npm run test
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/
      - name: Résumé Tests
        run: echo "## Couverture Jest" >> $GITHUB_STEP_SUMMARY


  docker_test:
    name: Docker Build & Healthcheck
    runs-on: ubuntu-latest
    needs: unit_tests
    steps:
      - uses: actions/checkout@v4
      - name: Docker build
        run: |
          REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker build -t ${{ secrets.REGISTRY_URL }}/$REPO:${{ github.sha }} .
      - name: Healthcheck
        run: |
          REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker run --rm -p 3000:3000 ${{ secrets.REGISTRY_URL }}/$REPO:${{ github.sha }} npm run healthcheck
      - name: Résumé Docker
        run: echo "## Docker Healthcheck" >> $GITHUB_STEP_SUMMARY

  build:
    name: Build RN Bundle
    runs-on: ubuntu-latest
    needs: [unit_tests, docker_test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci --no-audit --prefer-offline --progress=false --legacy-peer-deps
      - name: Verify android native project exists
        run: |
          if [ ! -f "android/gradlew" ] && [ ! -f "android/gradlew.bat" ]; then
            echo "android/ directory or gradlew not found.\n" \
                 "This workflow expects a committed android/ native project (Option 1).\n" \
                 "Run locally: npx expo prebuild --platform android && git add android && git commit -m 'Add android native project' && git push" \
                 "\nAlternatively, use EAS Build (option 2) instead of committing android/." && exit 1
          fi
      - name: Prebundle JS for Android (create assets/bundle)
        run: |
          set -e
          # Ensure assets folders exist
          mkdir -p android/app/src/main/assets
          mkdir -p android/app/src/main/res
          echo "Starting react-native bundle to produce index.android.bundle and assets"
          npx react-native bundle --platform android --dev false --entry-file index.ts --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res/ || true

      - name: Prepare Android build (decode keystore, env)
        env:
          ANDROID_KEYSTORE: ${{ secrets.ANDROID_KEYSTORE }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          set -e
          # Ensure Metro runs in production mode so the serializer returns the expected format
          export NODE_ENV=production
          # Mark CI environment and disable fancy terminal output to avoid corrupting Metro's JSON
          export CI=true
          export TERM=dumb
          cd android
          if [ -n "$ANDROID_KEYSTORE" ]; then
            echo "Decoding keystore from secret..."
            echo "$ANDROID_KEYSTORE" | base64 --decode > app/upload-keystore.jks
            echo "Keystore written to android/app/upload-keystore.jks"
            if [ -z "$ANDROID_KEYSTORE_PASSWORD" ] || [ -z "$ANDROID_KEY_ALIAS" ] || [ -z "$ANDROID_KEY_PASSWORD" ]; then
              echo "One of ANDROID_KEYSTORE_PASSWORD, ANDROID_KEY_ALIAS or ANDROID_KEY_PASSWORD is missing. Ensure all are set as repository secrets." && exit 1
            fi
          else
            echo "No Android keystore provided via secrets; building unsigned AAB."
          fi
          # Ensure gradlew is executable on Linux runners
          if [ -f "gradlew" ]; then
            chmod +x gradlew || true
          fi
          # Ensure google-services.json exists and contains a client for the app package.
          if [ ! -f "app/google-services.json" ]; then
            echo "android/app/google-services.json not found — creating a minimal placeholder"
            echo '{"client":[{"client_info":{"android_client_info":{"package_name":"com.saintenoytom.sorcierquiz"}}}],"project_info":{"project_id":"placeholder"},"configuration_version":"1"}' > app/google-services.json
          fi

      - name: Build JS bundle (Hermes) d'abord
        working-directory: android
        env:
          NODE_ENV: production
          CI: 'true'
          TERM: dumb
        run: |
          ./gradlew :app:createBundleReleaseJsAndAssets --no-daemon --stacktrace

      - name: Build Android App Bundle (.aab)
        working-directory: android
        env:
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          SIGNING_ARGS=""
          if [ -f "app/upload-keystore.jks" ] && [ -n "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" ]; then
            SIGNING_ARGS="-Pandroid.injected.signing.store.file=app/upload-keystore.jks -Pandroid.injected.signing.store.password=${{ secrets.ANDROID_KEYSTORE_PASSWORD }} -Pandroid.injected.signing.key.alias=${{ secrets.ANDROID_KEY_ALIAS }} -Pandroid.injected.signing.key.password=${{ secrets.ANDROID_KEY_PASSWORD }}"
          fi
          if [ -n "$SIGNING_ARGS" ]; then
            ./gradlew :app:bundleRelease $SIGNING_ARGS --no-daemon --stacktrace
          else
            ./gradlew :app:bundleRelease --no-daemon --stacktrace
          fi
      - name: Upload Android Bundle
        uses: actions/upload-artifact@v4
        with:
          name: android-bundle
          path: android/app/build/outputs/bundle/release/app-release.aab
      - name: Résumé Build
        run: echo "## Build Android" >> $GITHUB_STEP_SUMMARY

  sonar:
    name: Analyse SonarQube/SonarCloud
    runs-on: ubuntu-latest
    needs: [unit_tests, build]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      - name: Setup Java 17 for Sonar
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Download coverage artifact from unit tests
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: coverage
      - name: Install dependencies
        run: npm ci --no-audit --prefer-offline --progress=false --legacy-peer-deps
      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          # Default to SonarCloud if SONAR_HOST_URL is not supplied
          if [ -z "$SONAR_HOST_URL" ]; then
            export SONAR_HOST_URL="https://sonarcloud.io"
          fi
          if [ -z "$SONAR_TOKEN" ]; then
            echo "Warning: SONAR_TOKEN is not set. Authentication will fail for SonarCloud."
          fi
          npm run sonar
      - name: Résumé Sonar
        run: echo "## SonarQube Quality Gate" >> $GITHUB_STEP_SUMMARY

  deploy:
    name: Déploiement (conditionnel)
    runs-on: ubuntu-latest
    needs: [lint, unit_tests, docker_test, build, sonar]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      # Déploiement via Firebase App Distribution
      # Remplacez <APP_ID> par l'identifiant de votre app Firebase
      - name: Download Android bundle artifact
        uses: actions/download-artifact@v4
        with:
          name: android-bundle
          path: android/app/build/outputs/bundle/release
      - name: Authenticate to Google Cloud (service account)
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        run: |
          if [ -z "$GCP_SA_KEY" ]; then
            echo "GCP_SA_KEY missing - please add your service account JSON to repository secrets." && exit 1
          fi
          echo "$GCP_SA_KEY" > ${{ runner.temp }}/gcloud-key.json
          echo "Created key file at ${{ runner.temp }}/gcloud-key.json"
          echo "Setting GOOGLE_APPLICATION_CREDENTIALS"
          echo "##[set-env name=GOOGLE_APPLICATION_CREDENTIALS]${{ runner.temp }}/gcloud-key.json"
          export GOOGLE_APPLICATION_CREDENTIALS=${{ runner.temp }}/gcloud-key.json
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
      - name: Déployer sur Firebase App Distribution
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ runner.temp }}/gcloud-key.json
        run: |
          AAB_PATH="android/app/build/outputs/bundle/release/app-release.aab"
          if [ ! -f "$AAB_PATH" ]; then
            echo "Error: $AAB_PATH not found. Make sure the build job produced the AAB and uploaded it as artifact." && ls -la android/app/build/outputs/bundle/release || exit 1
          fi
          firebase appdistribution:distribute "$AAB_PATH" --app 1:956503401377:android:860aed9b77e38c4477a1e0
      - name: Résumé Déploiement
        run: echo "## Déploiement Firebase terminé" >> $GITHUB_STEP_SUMMARY
